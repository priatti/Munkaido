// =========================================
// COUNTRY DETECTION MODULE - GuriGO
// Automatikus orsz√°gfelismer√©s + manu√°lis v√°laszt√≥
// =========================================

// === √ñSSZES EU ORSZ√ÅG ===
const EU_COUNTRIES = [
  { code: 'AT', name: 'Ausztria', flag: 'üá¶üáπ', currency: 'EUR' },
  { code: 'BE', name: 'Belgium', flag: 'üáßüá™', currency: 'EUR' },
  { code: 'BG', name: 'Bulg√°ria', flag: 'üáßüá¨', currency: 'BGN' },
  { code: 'HR', name: 'Horv√°torsz√°g', flag: 'üá≠üá∑', currency: 'EUR' },
  { code: 'CY', name: 'Ciprus', flag: 'üá®üáæ', currency: 'EUR' },
  { code: 'CZ', name: 'Csehorsz√°g', flag: 'üá®üáø', currency: 'CZK' },
  { code: 'DK', name: 'D√°nia', flag: 'üá©üá∞', currency: 'DKK' },
  { code: 'EE', name: '√âsztorsz√°g', flag: 'üá™üá™', currency: 'EUR' },
  { code: 'FI', name: 'Finnorsz√°g', flag: 'üá´üáÆ', currency: 'EUR' },
  { code: 'FR', name: 'Franciaorsz√°g', flag: 'üá´üá∑', currency: 'EUR' },
  { code: 'DE', name: 'N√©metorsz√°g', flag: 'üá©üá™', currency: 'EUR' },
  { code: 'GR', name: 'G√∂r√∂gorsz√°g', flag: 'üá¨üá∑', currency: 'EUR' },
  { code: 'HU', name: 'Magyarorsz√°g', flag: 'üá≠üá∫', currency: 'HUF' },
  { code: 'IE', name: '√çrorsz√°g', flag: 'üáÆüá™', currency: 'EUR' },
  { code: 'IT', name: 'Olaszorsz√°g', flag: 'üáÆüáπ', currency: 'EUR' },
  { code: 'LV', name: 'Lettorsz√°g', flag: 'üá±üáª', currency: 'EUR' },
  { code: 'LT', name: 'Litv√°nia', flag: 'üá±üáπ', currency: 'EUR' },
  { code: 'LU', name: 'Luxemburg', flag: 'üá±üá∫', currency: 'EUR' },
  { code: 'MT', name: 'M√°lta', flag: 'üá≤üáπ', currency: 'EUR' },
  { code: 'NL', name: 'Hollandia', flag: 'üá≥üá±', currency: 'EUR' },
  { code: 'PL', name: 'Lengyelorsz√°g', flag: 'üáµüá±', currency: 'PLN' },
  { code: 'PT', name: 'Portug√°lia', flag: 'üáµüáπ', currency: 'EUR' },
  { code: 'RO', name: 'Rom√°nia', flag: 'üá∑üá¥', currency: 'RON' },
  { code: 'SK', name: 'Szlov√°kia', flag: 'üá∏üá∞', currency: 'EUR' },
  { code: 'SI', name: 'Szlov√©nia', flag: 'üá∏üáÆ', currency: 'EUR' },
  { code: 'ES', name: 'Spanyolorsz√°g', flag: 'üá™üá∏', currency: 'EUR' },
  { code: 'SE', name: 'Sv√©dorsz√°g', flag: 'üá∏üá™', currency: 'SEK' }
];

// === AUTOMATIKUS ORSZ√ÅGFELISMER√âS ===
async function detectUserCountry() {
  console.log('üîç Detecting user country...');
  
  // 1. B√∂ng√©sz≈ë nyelvbe√°ll√≠t√°s
  const browserLang = (navigator.language || navigator.userLanguage || '').toUpperCase();
  const langMatch = browserLang.match(/-([A-Z]{2})$/);
  if (langMatch && langMatch[1]) {
    const countryCode = langMatch[1];
    if (EU_COUNTRIES.find(c => c.code === countryCode)) {
      console.log('‚úÖ Country detected from browser:', countryCode);
      return countryCode;
    }
  }

  // 2. Timezone alap√∫ becsl√©s
  try {
    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
    const timezoneCountryMap = {
      'Europe/Budapest': 'HU',
      'Europe/Vienna': 'AT',
      'Europe/Berlin': 'DE',
      'Europe/Prague': 'CZ',
      'Europe/Warsaw': 'PL',
      'Europe/Bucharest': 'RO',
      'Europe/Sofia': 'BG',
      'Europe/Athens': 'GR',
      'Europe/Rome': 'IT',
      'Europe/Paris': 'FR',
      'Europe/Madrid': 'ES',
      'Europe/Lisbon': 'PT',
      'Europe/Amsterdam': 'NL',
      'Europe/Brussels': 'BE',
      'Europe/Stockholm': 'SE',
      'Europe/Copenhagen': 'DK',
      'Europe/Helsinki': 'FI',
      'Europe/Dublin': 'IE',
      'Europe/Ljubljana': 'SI',
      'Europe/Bratislava': 'SK',
      'Europe/Zagreb': 'HR',
      'Europe/Tallinn': 'EE',
      'Europe/Riga': 'LV',
      'Europe/Vilnius': 'LT'
    };
    
    if (timezoneCountryMap[timezone]) {
      console.log('‚úÖ Country detected from timezone:', timezoneCountryMap[timezone]);
      return timezoneCountryMap[timezone];
    }
  } catch (e) {
    console.warn('Timezone detection failed:', e);
  }

  // 3. IP-alap√∫ geolok√°ci√≥ (k√ºls≈ë API - opcion√°lis)
  try {
    const response = await fetch('https://ipapi.co/json/', { timeout: 3000 });
    if (response.ok) {
      const data = await response.json();
      if (data.country_code && EU_COUNTRIES.find(c => c.code === data.country_code)) {
        console.log('‚úÖ Country detected from IP:', data.country_code);
        return data.country_code;
      }
    }
  } catch (e) {
    console.warn('IP geolocation failed:', e);
  }

  // 4. Ha semmi nem m≈±k√∂d√∂tt, alap√©rtelmezett Magyarorsz√°g
  console.log('‚ö†Ô∏è Could not detect country, defaulting to HU');
  return 'HU';
}

// === ORSZ√ÅG MOD√ÅL MEGNYIT√ÅSA (csak ha sz√ºks√©ges) ===
function openCountryModal(detectedCountry = 'HU', isAutoDetected = false) {
  const modal = document.getElementById('country-modal');
  const select = document.getElementById('country-select');
  const detectionInfo = document.getElementById('country-detection-info');
  
  if (modal && select) {
    // Felt√∂ltj√ºk a select-et az √∂sszes EU orsz√°ggal
    select.innerHTML = EU_COUNTRIES
      .sort((a, b) => a.name.localeCompare(b.name, 'hu'))
      .map(c => `<option value="${c.code}">${c.flag} ${c.name} (${c.currency})</option>`)
      .join('');
    
    select.value = detectedCountry;
    
    // Info sz√∂veg friss√≠t√©se
    if (detectionInfo && isAutoDetected) {
      const countryInfo = EU_COUNTRIES.find(c => c.code === detectedCountry);
      detectionInfo.innerHTML = `
        ‚ÑπÔ∏è Automatikusan felismert√ºk: <strong>${countryInfo?.flag} ${countryInfo?.name}</strong>.<br>
        Ha ez nem helyes, v√°lassz m√°sik orsz√°got!
      `;
      detectionInfo.classList.remove('hidden');
    } else if (detectionInfo) {
      detectionInfo.classList.add('hidden');
    }
    
    modal.classList.remove('hidden');
    modal.classList.add('flex');
    console.log('Country modal opened with:', detectedCountry);
  }
}

// === ORSZ√ÅG MOD√ÅL BEZ√ÅR√ÅSA ===
function closeCountryModal() {
  const modal = document.getElementById('country-modal');
  if (modal) {
    modal.classList.add('hidden');
    modal.classList.remove('flex');
  }
}

// === ORSZ√ÅG MEGER≈êS√çT√âSE √âS MENT√âSE ===
async function confirmCountry(countryCode) {
  const currentUser = firebase.auth().currentUser;
  
  if (!currentUser) {
    console.error('No user logged in!');
    if (typeof showCustomAlert === 'function') {
      showCustomAlert('‚ùå Hiba: Nincs bejelentkezve felhaszn√°l√≥.', 'error');
    }
    return;
  }

  if (!countryCode || countryCode.length !== 2) {
    if (typeof showCustomAlert === 'function') {
      showCustomAlert('‚ö†Ô∏è K√©rlek v√°lassz egy orsz√°got!', 'warning');
    }
    return;
  }

  try {
    const button = event?.target;
    if (button) {
      button.disabled = true;
      button.innerHTML = '<span class="loading-spinner"></span> Ment√©s...';
    }

    await firebase.firestore()
      .collection('users')
      .doc(currentUser.uid)
      .collection('profile')
      .doc('info')
      .set({
        countryCode: countryCode.toUpperCase(),
        countryConfirmed: true,
        updatedAt: firebase.firestore.FieldValue.serverTimestamp()
      }, { merge: true });

    console.log('‚úÖ Country saved:', countryCode);
    closeCountryModal();

    const splash = document.getElementById('splash-screen');
    if (splash) {
      splash.classList.add('hidden');
      setTimeout(() => { splash.style.display = 'none'; }, 500);
    }

    const authScreen = document.getElementById('auth-screen');
    if (authScreen) authScreen.classList.add('hidden');

    const app = document.getElementById('app');
    if (app) app.classList.remove('hidden');

    if (typeof renderApp === 'function') renderApp();

    if (typeof showToast === 'function') {
      const countryInfo = EU_COUNTRIES.find(c => c.code === countryCode);
      showToast('success', 'Orsz√°g mentve', `${countryInfo?.flag} ${countryInfo?.name}`);
    }

  } catch (error) {
    console.error('‚ùå Country save error:', error);
    if (typeof showCustomAlert === 'function') {
      showCustomAlert('‚ùå Hiba t√∂rt√©nt a ment√©s sor√°n. Pr√≥b√°ld √∫jra!', 'error');
    }
    const button = event?.target;
    if (button) {
      button.disabled = false;
      button.innerHTML = '‚úì Meger≈ës√≠t√©s';
    }
  }
}

// === AUTOMATIKUS ORSZ√ÅGBE√ÅLL√çT√ÅS (els≈ë regisztr√°ci√≥) ===
async function autoSetCountryForNewUser(userId) {
  try {
    const profileRef = firebase.firestore()
      .collection('users')
      .doc(userId)
      .collection('profile')
      .doc('info');
    
    const doc = await profileRef.get();
    
    // Ha m√°r van countryCode √©s confirmed, nem csin√°lunk semmit
    if (doc.exists && doc.data().countryConfirmed) {
      console.log('‚úÖ Country already confirmed for user');
      return true;
    }

    // Felismerj√ºk az orsz√°got
    const detectedCountry = await detectUserCountry();
    
    // Ha siker√ºlt felismerni √âS nem HU (mert HU az alap√©rtelmezett fallback)
    // akkor automatikusan mentj√ºk
    if (detectedCountry && detectedCountry !== 'HU') {
      await profileRef.set({
        countryCode: detectedCountry,
        countryConfirmed: true,
        autoDetected: true,
        updatedAt: firebase.firestore.FieldValue.serverTimestamp()
      }, { merge: true });
      
      console.log('‚úÖ Country auto-set:', detectedCountry);
      return true;
    }

    // Ha HU vagy nem siker√ºlt felismerni, megk√©rdezz√ºk
    openCountryModal(detectedCountry, true);
    return false;

  } catch (error) {
    console.error('Auto country detection error:', error);
    openCountryModal('HU', false);
    return false;
  }
}

// === ORSZ√ÅG V√ÅLTOZTAT√ÅSA (Settings men√ºb≈ël) ===
async function openCountryChangeModal() {
  const currentUser = firebase.auth().currentUser;
  
  if (!currentUser) {
    if (typeof showCustomAlert === 'function') {
      showCustomAlert('‚ö†Ô∏è Jelentkezz be az orsz√°g m√≥dos√≠t√°s√°hoz!', 'warning');
    }
    return;
  }

  try {
    const doc = await firebase.firestore()
      .collection('users')
      .doc(currentUser.uid)
      .collection('profile')
      .doc('info')
      .get();
    
    const currentCountry = doc.exists ? doc.data().countryCode : 'HU';
    openCountryModal(currentCountry, false);
  } catch (error) {
    console.error('Error loading country:', error);
    openCountryModal('HU', false);
  }
}

// === ORSZ√ÅG INFORM√ÅCI√ì LEK√âR√âSE ===
function getCountryInfo(countryCode) {
  return EU_COUNTRIES.find(c => c.code === countryCode) || 
         { code: 'HU', name: 'Magyarorsz√°g', flag: 'üá≠üá∫', currency: 'HUF' };
}

// === GLOB√ÅLIS EXPORTOK ===
window.detectUserCountry = detectUserCountry;
window.autoSetCountryForNewUser = autoSetCountryForNewUser;
window.openCountryModal = openCountryModal;
window.closeCountryModal = closeCountryModal;
window.confirmCountry = confirmCountry;
window.openCountryChangeModal = openCountryChangeModal;
window.getCountryInfo = getCountryInfo;
window.EU_COUNTRIES = EU_COUNTRIES;

console.log('‚úÖ Country Detection Module loaded - 27 EU countries supported');
